package com.dandelion.memberandroid.dao.auto;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.dandelion.memberandroid.dao.auto.MerchantInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MERCHANT_INFO.
*/
public class MerchantInfoDao extends AbstractDao<MerchantInfo, Long> {

    public static final String TABLENAME = "MERCHANT_INFO";

    /**
     * Properties of entity MerchantInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Avatarurl = new Property(1, String.class, "avatarurl", false, "AVATARURL");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Address = new Property(3, String.class, "address", false, "ADDRESS");
        public final static Property Phone = new Property(4, String.class, "phone", false, "PHONE");
        public final static Property Email = new Property(5, String.class, "email", false, "EMAIL");
        public final static Property Merchanttype = new Property(6, String.class, "merchanttype", false, "MERCHANTTYPE");
        public final static Property Introduction = new Property(7, String.class, "introduction", false, "INTRODUCTION");
        public final static Property Namerequired = new Property(8, boolean.class, "namerequired", false, "NAMEREQUIRED");
        public final static Property Sexrequired = new Property(9, boolean.class, "sexrequired", false, "SEXREQUIRED");
        public final static Property Phonerequired = new Property(10, boolean.class, "phonerequired", false, "PHONEREQUIRED");
        public final static Property Addressrequired = new Property(11, boolean.class, "addressrequired", false, "ADDRESSREQUIRED");
        public final static Property Emailrequired = new Property(12, boolean.class, "emailrequired", false, "EMAILREQUIRED");
        public final static Property Birthdayrequired = new Property(13, boolean.class, "birthdayrequired", false, "BIRTHDAYREQUIRED");
        public final static Property Membersetting = new Property(14, boolean.class, "membersetting", false, "MEMBERSETTING");
        public final static Property Scoreplan = new Property(15, boolean.class, "scoreplan", false, "SCOREPLAN");
        public final static Property Amountrequired = new Property(16, Integer.class, "amountrequired", false, "AMOUNTREQUIRED");
        public final static Property Amountcountrequired = new Property(17, Integer.class, "amountcountrequired", false, "AMOUNTCOUNTREQUIRED");
        public final static Property Useridfk = new Property(18, long.class, "useridfk", false, "USERIDFK");
        public final static Property CreatedDate = new Property(19, java.util.Date.class, "createdDate", false, "CREATED_DATE");
        public final static Property ModifyDate = new Property(20, java.util.Date.class, "modifyDate", false, "MODIFY_DATE");
    };


    public MerchantInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MerchantInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MERCHANT_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'AVATARURL' TEXT NOT NULL ," + // 1: avatarurl
                "'NAME' TEXT NOT NULL ," + // 2: name
                "'ADDRESS' TEXT NOT NULL ," + // 3: address
                "'PHONE' TEXT," + // 4: phone
                "'EMAIL' TEXT," + // 5: email
                "'MERCHANTTYPE' TEXT," + // 6: merchanttype
                "'INTRODUCTION' TEXT," + // 7: introduction
                "'NAMEREQUIRED' INTEGER NOT NULL ," + // 8: namerequired
                "'SEXREQUIRED' INTEGER NOT NULL ," + // 9: sexrequired
                "'PHONEREQUIRED' INTEGER NOT NULL ," + // 10: phonerequired
                "'ADDRESSREQUIRED' INTEGER NOT NULL ," + // 11: addressrequired
                "'EMAILREQUIRED' INTEGER NOT NULL ," + // 12: emailrequired
                "'BIRTHDAYREQUIRED' INTEGER NOT NULL ," + // 13: birthdayrequired
                "'MEMBERSETTING' INTEGER NOT NULL ," + // 14: membersetting
                "'SCOREPLAN' INTEGER NOT NULL ," + // 15: scoreplan
                "'AMOUNTREQUIRED' INTEGER," + // 16: amountrequired
                "'AMOUNTCOUNTREQUIRED' INTEGER," + // 17: amountcountrequired
                "'USERIDFK' INTEGER NOT NULL ," + // 18: useridfk
                "'CREATED_DATE' INTEGER NOT NULL ," + // 19: createdDate
                "'MODIFY_DATE' INTEGER NOT NULL );"); // 20: modifyDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MERCHANT_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MerchantInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getAvatarurl());
        stmt.bindString(3, entity.getName());
        stmt.bindString(4, entity.getAddress());
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(6, email);
        }
 
        String merchanttype = entity.getMerchanttype();
        if (merchanttype != null) {
            stmt.bindString(7, merchanttype);
        }
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(8, introduction);
        }
        stmt.bindLong(9, entity.getNamerequired() ? 1l: 0l);
        stmt.bindLong(10, entity.getSexrequired() ? 1l: 0l);
        stmt.bindLong(11, entity.getPhonerequired() ? 1l: 0l);
        stmt.bindLong(12, entity.getAddressrequired() ? 1l: 0l);
        stmt.bindLong(13, entity.getEmailrequired() ? 1l: 0l);
        stmt.bindLong(14, entity.getBirthdayrequired() ? 1l: 0l);
        stmt.bindLong(15, entity.getMembersetting() ? 1l: 0l);
        stmt.bindLong(16, entity.getScoreplan() ? 1l: 0l);
 
        Integer amountrequired = entity.getAmountrequired();
        if (amountrequired != null) {
            stmt.bindLong(17, amountrequired);
        }
 
        Integer amountcountrequired = entity.getAmountcountrequired();
        if (amountcountrequired != null) {
            stmt.bindLong(18, amountcountrequired);
        }
        stmt.bindLong(19, entity.getUseridfk());
        stmt.bindLong(20, entity.getCreatedDate().getTime());
        stmt.bindLong(21, entity.getModifyDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MerchantInfo readEntity(Cursor cursor, int offset) {
        MerchantInfo entity = new MerchantInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // avatarurl
            cursor.getString(offset + 2), // name
            cursor.getString(offset + 3), // address
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // phone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // email
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // merchanttype
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // introduction
            cursor.getShort(offset + 8) != 0, // namerequired
            cursor.getShort(offset + 9) != 0, // sexrequired
            cursor.getShort(offset + 10) != 0, // phonerequired
            cursor.getShort(offset + 11) != 0, // addressrequired
            cursor.getShort(offset + 12) != 0, // emailrequired
            cursor.getShort(offset + 13) != 0, // birthdayrequired
            cursor.getShort(offset + 14) != 0, // membersetting
            cursor.getShort(offset + 15) != 0, // scoreplan
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // amountrequired
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // amountcountrequired
            cursor.getLong(offset + 18), // useridfk
            new java.util.Date(cursor.getLong(offset + 19)), // createdDate
            new java.util.Date(cursor.getLong(offset + 20)) // modifyDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MerchantInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAvatarurl(cursor.getString(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setAddress(cursor.getString(offset + 3));
        entity.setPhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEmail(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMerchanttype(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIntroduction(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNamerequired(cursor.getShort(offset + 8) != 0);
        entity.setSexrequired(cursor.getShort(offset + 9) != 0);
        entity.setPhonerequired(cursor.getShort(offset + 10) != 0);
        entity.setAddressrequired(cursor.getShort(offset + 11) != 0);
        entity.setEmailrequired(cursor.getShort(offset + 12) != 0);
        entity.setBirthdayrequired(cursor.getShort(offset + 13) != 0);
        entity.setMembersetting(cursor.getShort(offset + 14) != 0);
        entity.setScoreplan(cursor.getShort(offset + 15) != 0);
        entity.setAmountrequired(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setAmountcountrequired(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setUseridfk(cursor.getLong(offset + 18));
        entity.setCreatedDate(new java.util.Date(cursor.getLong(offset + 19)));
        entity.setModifyDate(new java.util.Date(cursor.getLong(offset + 20)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MerchantInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MerchantInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.dandelion.memberandroid.dao.auto;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.dandelion.memberandroid.dao.auto.MemberInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MEMBER_INFO.
*/
public class MemberInfoDao extends AbstractDao<MemberInfo, Long> {

    public static final String TABLENAME = "MEMBER_INFO";

    /**
     * Properties of entity MemberInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Avatarurl = new Property(1, String.class, "avatarurl", false, "AVATARURL");
        public final static Property Backgroundurl = new Property(2, String.class, "backgroundurl", false, "BACKGROUNDURL");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Address = new Property(4, String.class, "address", false, "ADDRESS");
        public final static Property Phone = new Property(5, String.class, "phone", false, "PHONE");
        public final static Property Introduction = new Property(6, String.class, "introduction", false, "INTRODUCTION");
        public final static Property Birthday = new Property(7, java.util.Date.class, "birthday", false, "BIRTHDAY");
        public final static Property Createddate = new Property(8, java.util.Date.class, "createddate", false, "CREATEDDATE");
        public final static Property Modifieddate = new Property(9, java.util.Date.class, "modifieddate", false, "MODIFIEDDATE");
        public final static Property Sex = new Property(10, Integer.class, "sex", false, "SEX");
        public final static Property UserId = new Property(11, Long.class, "userId", false, "USER_ID");
    };


    public MemberInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MemberInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MEMBER_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'AVATARURL' TEXT," + // 1: avatarurl
                "'BACKGROUNDURL' TEXT," + // 2: backgroundurl
                "'NAME' TEXT NOT NULL ," + // 3: name
                "'ADDRESS' TEXT," + // 4: address
                "'PHONE' TEXT," + // 5: phone
                "'INTRODUCTION' TEXT," + // 6: introduction
                "'BIRTHDAY' INTEGER," + // 7: birthday
                "'CREATEDDATE' INTEGER NOT NULL ," + // 8: createddate
                "'MODIFIEDDATE' INTEGER NOT NULL ," + // 9: modifieddate
                "'SEX' INTEGER," + // 10: sex
                "'USER_ID' INTEGER);"); // 11: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MEMBER_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MemberInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String avatarurl = entity.getAvatarurl();
        if (avatarurl != null) {
            stmt.bindString(2, avatarurl);
        }
 
        String backgroundurl = entity.getBackgroundurl();
        if (backgroundurl != null) {
            stmt.bindString(3, backgroundurl);
        }
        stmt.bindString(4, entity.getName());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(7, introduction);
        }
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(8, birthday.getTime());
        }
        stmt.bindLong(9, entity.getCreateddate().getTime());
        stmt.bindLong(10, entity.getModifieddate().getTime());
 
        Integer sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(11, sex);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(12, userId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MemberInfo readEntity(Cursor cursor, int offset) {
        MemberInfo entity = new MemberInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // avatarurl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // backgroundurl
            cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // address
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // introduction
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // birthday
            new java.util.Date(cursor.getLong(offset + 8)), // createddate
            new java.util.Date(cursor.getLong(offset + 9)), // modifieddate
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // sex
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11) // userId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MemberInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAvatarurl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBackgroundurl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.getString(offset + 3));
        entity.setAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIntroduction(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBirthday(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setCreateddate(new java.util.Date(cursor.getLong(offset + 8)));
        entity.setModifieddate(new java.util.Date(cursor.getLong(offset + 9)));
        entity.setSex(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setUserId(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MemberInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MemberInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
